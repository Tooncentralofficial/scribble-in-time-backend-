"""
Django settings for scribbleintimeai project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-f1^6f3i&1s@t$ud9qdnzw&g3a9re)0t6)w!6v5v144mo77vuw#')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

# Get the Railway URL for allowed hosts
RAILWAY_STATIC_URL = os.getenv('RAILWAY_STATIC_URL', '')
ALLOWED_HOSTS = ['*']

# Add Railway domain to allowed hosts if available
if RAILWAY_STATIC_URL:
    ALLOWED_HOSTS.append(RAILWAY_STATIC_URL.replace('https://', '').replace('http://', ''))

# AI Configuration - OpenRouter
# Required: Get your API key from https://openrouter.ai/keys
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY', '')

# Model configuration
OPENROUTER_MODEL = os.getenv('OPENROUTER_MODEL', 'meta-llama/llama-3.3-70b-instruct:free')

# System message for the AI
AI_SYSTEM_MESSAGE = """You are Uche, the owner and founder of Scribble in Time. You're speaking directly to your customers and potential clients.

PERSONALITY & COMMUNICATION STYLE:
- Speak as yourself (the business owner), not in third person
- Be warm, personal, and conversational - like you're talking to a friend
- Show genuine enthusiasm for your business and services
- Use "I", "my", "we" - make it feel like a real conversation with the business owner

RESPONSE GUIDELINES:
- ALWAYS use the provided documents as your primary source of information
- Use conversation memory to provide context-aware, personalized responses
- If someone asks for more details or wants you to be "expansive", provide comprehensive, detailed responses
- For general questions, start with a brief answer but offer to elaborate if they'd like more details
- Never give generic, generalized answers - always be specific and personal
- If you don't have information in the documents, say "I don't have that specific information in my records, but I'd be happy to discuss it further with you"

DOCUMENT & MEMORY USAGE:
- Use the exact information from your documents when answering factual questions
- Reference previous conversation context from memory when relevant
- When combining information, stay true to the facts but present them conversationally
- If someone asks about something not in your documents, be honest about it and offer to help them find the information
- Use memory to remember user preferences and previous interactions

CONFIDENCE & REFERRAL:
- Be confident when you have information from your documents
- If you're uncertain or don't have specific information, be honest about it
- When referring to human contact, use: "For more detailed information or clarification, please feel free to contact me directly at contact.ascribbleintime@gmail.com"

EXAMPLES OF GOOD RESPONSES:
- "Based on my records, I offer..." (not "The company offers...")
- "I can provide you with..." (not "The system can provide...")
- "Let me give you a detailed explanation..." (when asked to be expansive)
- "I don't have that specific detail in my files, but I'd love to discuss it with you directly"
- "As we discussed earlier..." (using memory context)

Remember: You're Uche, the real person behind Scribble in Time, having a conversation with someone interested in your business. Use your documents and memory to provide the most helpful, personalized experience possible."""

# OpenRouter API headers
SITE_URL = os.getenv('SITE_URL', 'http://localhost:8000')
OPENROUTER_HEADERS = {
    "HTTP-Referer": SITE_URL,
    "X-Title": "ScribbleAI"
}


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'rest_framework',
    'corsheaders',
    'chat',
    'scribble',
]

# Site framework
SITE_ID = 1


# CORS settings for development
CORS_ALLOW_ALL_ORIGINS = True  # Allow all origins in development
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_HEADERS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Allow all origins for development
CSRF_TRUSTED_ORIGINS = ['http://*', 'https://*']
CSRF_COOKIE_SECURE = False
CSRF_USE_SESSIONS = False
CSRF_COOKIE_HTTPONLY = False

# Custom user model
AUTH_USER_MODEL = 'scribble.User'

# Login settings
LOGIN_URL = '/admin/login/'
LOGIN_REDIRECT_URL = '/admin/'
LOGOUT_REDIRECT_URL = '/admin/login/'

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB
FILE_UPLOAD_PERMISSIONS = 0o644

INSTALLED_APPS = [
    # Django built-in apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    # Third-party apps
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',
    # 'allauth',
    # 'allauth.account',
    # 'allauth.socialaccount',
    # 'allauth.socialaccount.providers.google',
    'django.contrib.humanize',
    # Local apps (our app must come after auth to override User model)
    'scribble.apps.ScribbleConfig',
    'chat',
]

class DisableCSRFForAPI:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        # Skip CSRF for all requests
        setattr(request, '_dont_enforce_csrf_checks', True)
        response = self.get_response(request)
        # Add CORS headers to all responses
        response['Access-Control-Allow-Origin'] = '*'
        response['Access-Control-Allow-Methods'] = 'GET, POST, PUT, PATCH, DELETE, OPTIONS'
        response['Access-Control-Allow-Headers'] = 'Content-Type, Authorization, X-CSRFToken'
        response['Access-Control-Allow-Credentials'] = 'true'
        return response

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Should be as high as possible
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',  # Keep but will be bypassed by our middleware
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Required for admin
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'scribbleintimeai.settings.DisableCSRFForAPI',  # This will disable CSRF for all requests
]

# CORS Settings (Development)
CORS_ALLOW_ALL_ORIGINS = True  # Allow all origins in development
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
# Media files (user-uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Only add static directory if it exists
static_dir = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    static_dir,
] if os.path.exists(static_dir) else []

ROOT_URLCONF = 'scribbleintimeai.urls'

# Templates configuration
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),  # Root templates directory
            os.path.join(BASE_DIR, 'scribble', 'templates'),  # App templates directory
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'scribbleintimeai.wsgi.application'
ASGI_APPLICATION = 'scribbleintimeai.asgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Check if we're on Railway (PostgreSQL) or local (SQLite)
DATABASE_URL = os.getenv('DATABASE_URL')

if DATABASE_URL:
    # Railway PostgreSQL configuration
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
else:
    # Local SQLite configuration
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Media files (user-uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Authentication
LOGIN_URL = '/admin/login/'
LOGIN_REDIRECT_URL = '/admin/dashboard/'
LOGOUT_REDIRECT_URL = '/admin/login/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'UNAUTHENTICATED_USER': None,  # No user authentication
    'UNAUTHENTICATED_TOKEN': None  # No token authentication
}

# CSRF settings
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:5173',
    'http://127.0.0.1:5173',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
]

# Session settings
SESSION_COOKIE_AGE = 1209600  # 2 weeks in seconds
SESSION_SAVE_EVERY_REQUEST = True

# Email settings (update with your email configuration)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development
# For production, use:
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.your-email-provider.com'
SESSION_COOKIE_SECURE = False
SESSION_COOKIE_SAMESITE = None
SESSION_SAVE_EVERY_REQUEST = False

# Admin site header and title
ADMIN_SITE_HEADER = 'Scribble AI Admin'
ADMIN_SITE_TITLE = 'Scribble AI Admin Portal'
ADMIN_INDEX_TITLE = 'Welcome to Scribble AI Admin'
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
else:
    # Development settings
    SESSION_COOKIE_SAMESITE = 'Lax'
    CSRF_COOKIE_SAMESITE = 'Lax'
    SESSION_COOKIE_HTTPONLY = False  # Allow JavaScript to access session cookie
    CSRF_USE_SESSIONS = False
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
# ... (rest of the code remains the same)
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}
